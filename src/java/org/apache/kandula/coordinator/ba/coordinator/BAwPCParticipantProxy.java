/*
 * Copyright 2007 The Apache Software Foundation.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 *  @author Hannes Erven, Georg Hicker
 */

package org.apache.kandula.coordinator.ba.coordinator;

import java.net.MalformedURLException;
import java.net.URL;

import org.apache.axis.AxisFault;
import org.apache.axis.message.addressing.EndpointReference;
import org.apache.kandula.utils.AddressingHeaders;
import org.apache.kandula.utils.Service;
import org.apache.kandula.utils.TCPSnifferHelper;
import org.apache.kandula.wsba.BusinessAgreementWithParticipantCompletionParticipantPortTypeBindingStub;

/**
 * This class is a wrapper around the autogenerated axis web service stubs.
 * 
 * @author Hannes Erven, Georg Hicker (C) 2006
 *
 */
public class BAwPCParticipantProxy 
	extends	BusinessAgreementWithParticipantCompletionParticipantPortTypeBindingStub
	implements AbstractCoordParticipantProxy
{

	/**
	 * The participant ID.
	 */
	protected final String myID;
	
	/**
	 * The endpoint where the participant can be reached.
	 */
	protected final EndpointReference myEndpoint;

	/**
	 * Current addressing headers.
	 */
	final AddressingHeaders headers;

	/**
	 * Constructor for a new participant.
	 * @param id The participant ID
	 * @param epr The EPR the participant can be reached at.
	 * @throws AxisFault ???
	 * @throws MalformedURLException ??? 
	 */
	public BAwPCParticipantProxy(final String id, final EndpointReference epr)
	throws AxisFault, MalformedURLException {
		super(new URL(TCPSnifferHelper.redirect(epr.getAddress().toString())),
				new Service());
		this.headers = new AddressingHeaders(epr, null);
		((Service) this.service).setAddressingHeaders(this.headers);

		
		if (id == null || id.length()==0)
			throw new IllegalArgumentException("Sorry, participant ID must not be null or empty");
		
		if (epr == null)
			throw new IllegalArgumentException("Sorry, participant EPR must not be null");
		
		this.myID = id;
		this.myEndpoint = epr;
	}

	
	/**
	 * Current addressing headers.
	 * @return Addressing headers.
	 */
	public AddressingHeaders getAddressingHeaders(){
		return this.headers;
	}

}
